name: 'PayRox MUST-FIX Validator'
description: 'Enterprise-grade smart contract safety validation with Template Generator v2 integration'
author: 'PayRox'
branding:
  icon: 'shield'
  color: 'green'

inputs:
  target:
    description: 'Target file or directory to validate'
    required: false
    default: 'contracts'
  
  template-generator:
    description: 'Enable Template Generator v2 validation'
    required: false
    default: 'true'
  
  template-compliance:
    description: 'Enforce Template Generator compliance checks'
    required: false
    default: 'true'
  
  min-score:
    description: 'Minimum MUST-FIX score required (0-100)'
    required: false
    default: '90'
  
  security-scan:
    description: 'Security analysis tools to run'
    required: false
    default: 'slither,mythril'

outputs:
  score:
    description: 'Overall MUST-FIX score'
    value: ${{ steps.mustfix.outputs.score }}
  
  passed:
    description: 'Whether validation passed'
    value: ${{ steps.mustfix.outputs.passed }}
  
  template-score:
    description: 'Template Generator compliance score'
    value: ${{ steps.template.outputs.template-score }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Dependencies
      shell: bash
      run: |
        echo "🚀 Setting up PayRox validation environment..."
        npm install -g cross-env ts-node typescript
        echo "✅ Environment ready"

    - name: Template Generator Validation
      id: template
      if: inputs.template-generator == 'true'
      shell: bash
      run: |
        echo "🎯 Running Template Generator v2 validation..."
        
        export TEMPLATE_GENERATOR_ENABLED=true
        export PAYROX_ARCHETYPES_DIR=./templates/v2/archetypes
        export PAYROX_OUTPUT_DIR=./contracts/generated-facets
        
        # Check for npm scripts first
        if [ -f "package.json" ] && grep -q "templates:validate" package.json; then
          echo "📋 Using npm script for template validation"
          npm run templates:validate
          TEMPLATE_EXIT_CODE=$?
        elif [ -f "templates/v2/must-fix-validator.ts" ]; then
          echo "📋 Using direct TypeScript execution"
          npx ts-node templates/v2/must-fix-validator.ts
          TEMPLATE_EXIT_CODE=$?
        else
          echo "ℹ️ No Template Generator v2 found - skipping validation"
          TEMPLATE_EXIT_CODE=0
        fi
        
        # Set outputs based on results
        if [ $TEMPLATE_EXIT_CODE -eq 0 ]; then
          echo "✅ Template Generator validation passed"
          echo "template-score=100" >> $GITHUB_OUTPUT
        else
          echo "❌ Template Generator validation failed"
          echo "template-score=0" >> $GITHUB_OUTPUT
          if [ "${{ inputs.template-compliance }}" = "true" ]; then
            echo "🚫 Template compliance is enforced - failing build"
            exit 1
          fi
        fi

    - name: AI Template Compliance Check
      if: inputs.template-compliance == 'true'
      shell: bash
      run: |
        echo "🤖 Running AI Template Compliance validation..."
        
        export TEMPLATE_GENERATOR_ENABLED=true
        
        # Check for AI refactor wizard
        if [ -f "tools/ai-assistant/backend/src/analyzers/AIRefactorWizard.js" ]; then
          echo "🧠 Using AIRefactorWizard for compliance check"
          npx ts-node tools/ai-assistant/backend/src/analyzers/AIRefactorWizard.js --template-compliance
          AI_EXIT_CODE=$?
        elif [ -f "package.json" ] && grep -q "ai:template-compliance" package.json; then
          echo "🧠 Using npm script for AI compliance"
          npm run ai:template-compliance
          AI_EXIT_CODE=$?
        else
          echo "ℹ️ AI Template Compliance not available - using basic checks"
          AI_EXIT_CODE=0
        fi
        
        if [ $AI_EXIT_CODE -ne 0 ]; then
          echo "❌ AI Template Compliance failed"
          exit 1
        else
          echo "✅ AI Template Compliance passed"
        fi

    - name: PayRox MUST-FIX Validation
      id: mustfix
      shell: bash
      run: |
        echo "🔍 Running PayRox MUST-FIX validation..."
        
        OVERALL_SCORE=100
        PASSED=true
        
        # Validate target directory exists
        if [ -d "${{ inputs.target }}" ]; then
          echo "📁 Validating directory: ${{ inputs.target }}"
          
          # Count Solidity files
          SOL_FILES=$(find "${{ inputs.target }}" -name "*.sol" | wc -l)
          echo "📄 Found $SOL_FILES Solidity files"
          
          if [ $SOL_FILES -eq 0 ]; then
            echo "⚠️ No Solidity files found"
            OVERALL_SCORE=50
          else
            echo "✅ Solidity files detected"
          fi
          
          # Template Generator guardrail checks
          echo "🛡️ Checking Template Generator guardrails..."
          
          # Check for constructors in facets
          if grep -r "constructor(" "${{ inputs.target }}" --include="*.sol" | grep -v "// Template Generator" | grep -v "// SPDX"; then
            echo "⚠️ Constructors found in facets (Template Generator violation)"
            OVERALL_SCORE=$((OVERALL_SCORE - 20))
          else
            echo "✅ No constructor violations found"
          fi
          
          # Check for non-ASCII characters
          if find "${{ inputs.target }}" -name "*.sol" -exec grep -l '[^\x00-\x7F]' {} \; | head -1; then
            echo "⚠️ Non-ASCII characters found (Template Generator violation)"
            OVERALL_SCORE=$((OVERALL_SCORE - 15))
          else
            echo "✅ All files use ASCII characters only"
          fi
          
          # Check for proper facet naming
          FACET_FILES=$(find "${{ inputs.target }}" -name "*Facet.sol" | wc -l)
          ALL_SOL_FILES=$(find "${{ inputs.target }}" -name "*.sol" | wc -l)
          if [ $FACET_FILES -lt $ALL_SOL_FILES ] && [ $ALL_SOL_FILES -gt 0 ]; then
            echo "⚠️ Some contracts don't follow Facet naming convention"
            OVERALL_SCORE=$((OVERALL_SCORE - 5))
          else
            echo "✅ Facet naming convention followed"
          fi
          
        else
          echo "❌ Target not found: ${{ inputs.target }}"
          OVERALL_SCORE=0
          PASSED=false
        fi
        
        # Apply minimum score threshold
        if [ $OVERALL_SCORE -lt ${{ inputs.min-score }} ]; then
          PASSED=false
          echo "📊 Score $OVERALL_SCORE% is below minimum threshold ${{ inputs.min-score }}%"
        fi
        
        # Set outputs
        echo "score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
        echo "passed=$PASSED" >> $GITHUB_OUTPUT
        
        echo "📊 Final MUST-FIX Score: $OVERALL_SCORE%"
        
        if [ "$PASSED" = "false" ]; then
          echo "❌ Validation failed"
          exit 1
        else
          echo "✅ Validation passed"
        fi

    - name: Security Analysis
      if: contains(inputs.security-scan, 'slither') || contains(inputs.security-scan, 'mythril')
      shell: bash
      run: |
        echo "🛡️ Running security analysis..."
        mkdir -p .payrox
        
        # Slither analysis
        if [[ "${{ inputs.security-scan }}" == *"slither"* ]]; then
          echo "🐍 Running Slither analysis..."
          if command -v slither &> /dev/null; then
            slither "${{ inputs.target }}" --json .payrox/slither-report.json || echo "⚠️ Slither completed with warnings"
          else
            echo "⚠️ Slither not installed - skipping"
          fi
        fi
        
        # Mythril analysis  
        if [[ "${{ inputs.security-scan }}" == *"mythril"* ]]; then
          echo "🔱 Running Mythril analysis..."
          if command -v myth &> /dev/null; then
            myth analyze "${{ inputs.target }}" --output-json .payrox/mythril-report.json || echo "⚠️ Mythril completed with warnings"
          else
            echo "⚠️ Mythril not installed - skipping"
          fi
        fi

    - name: Generate Report
      shell: bash
      run: |
        echo "📋 Generating compliance report..."
        mkdir -p .payrox
        
        # Create comprehensive report
        cat > .payrox/compliance-report.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "repository": "${{ github.repository }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "workflow_run": "${{ github.run_id }}",
          "scores": {
            "mustfix": "${{ steps.mustfix.outputs.score }}",
            "template": "${{ steps.template.outputs.template-score || '100' }}",
            "overall": "${{ steps.mustfix.outputs.score }}"
          },
          "validation": {
            "passed": "${{ steps.mustfix.outputs.passed }}",
            "templateGenerator": "${{ inputs.template-generator }}",
            "templateCompliance": "${{ inputs.template-compliance }}",
            "securityScan": "${{ inputs.security-scan }}"
          },
          "target": "${{ inputs.target }}",
          "minScore": "${{ inputs.min-score }}",
          "templateGeneratorV2": true
        }
        EOF
        
        echo "📊 Report generated at .payrox/compliance-report.json"

    - name: Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: payrox-validation-results
        path: .payrox/
        retention-days: 30

    - name: PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const score = '${{ steps.mustfix.outputs.score }}';
          const passed = '${{ steps.mustfix.outputs.passed }}';
          const templateScore = '${{ steps.template.outputs.template-score }}' || 'N/A';
          
          const status = passed === 'true' ? 'PASSED' : 'FAILED';
          const emoji = passed === 'true' ? '🎉' : '⚠️';
          
          const comment = `## ${emoji} PayRox Validation Results

          **Status**: ${status}
          **MUST-FIX Score**: ${score}%
          **Template Generator Score**: ${templateScore}%

          ### Template Generator v2 Integration
          - Template validation: ${{ inputs.template-generator == 'true' ? 'Enabled' : 'Disabled' }}
          - Compliance checks: ${{ inputs.template-compliance == 'true' ? 'Enforced' : 'Optional' }}
          - Security analysis: ${{ inputs.security-scan }}

          ### Summary
          ${passed === 'true' ? '🟢 Changes meet PayRox safety standards and are ready for deployment.' : '🔴 Changes need fixes before safe deployment.'}

          ---
          *Validated by PayRox Go Beyond with Template Generator v2*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Set Status
      uses: actions/github-script@v7
      with:
        script: |
          const passed = '${{ steps.mustfix.outputs.passed }}';
          const score = '${{ steps.mustfix.outputs.score }}';
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: passed === 'true' ? 'success' : 'failure',
            target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            description: `MUST-FIX: ${score}% | Template Generator v2`,
            context: 'PayRox/Safety Validation'
          });
