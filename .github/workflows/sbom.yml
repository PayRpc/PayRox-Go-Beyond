name: Generate SBOM

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to generate SBOM for'
        required: true
        default: 'hardhat'
        type: choice
        options:
          - hardhat
          - localhost
          - sepolia
          - mainnet

jobs:
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for accurate git info

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci

      - name: Compile Contracts
        run: |
          npm run compile

      - name: Generate SBOM
        run: |
          # Create reports directory
          mkdir -p reports

          # Determine network
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            NETWORK="${{ github.event.inputs.network }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            NETWORK="mainnet"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            NETWORK="sepolia"
          else
            NETWORK="hardhat"
          fi

          echo "🔧 Generating SBOM for network: $NETWORK"

          # Check if SBOM task exists
          if npx hardhat help | grep -q "sbom"; then
            npx hardhat sbom --network $NETWORK --verbose
          else
            echo "⚠️ SBOM task not available, generating basic SBOM..."
            # Generate basic SBOM using package.json and compiled contracts
            node -e "
              const fs = require('fs');
              const path = require('path');
              const pkg = require('./package.json');
              
              const sbom = {
                bomFormat: 'CycloneDX',
                specVersion: '1.4',
                serialNumber: 'urn:uuid:' + require('crypto').randomUUID(),
                version: 1,
                metadata: {
                  timestamp: new Date().toISOString(),
                  tools: [{
                    vendor: 'PayRox',
                    name: 'Go Beyond SBOM Generator',
                    version: '1.0.0'
                  }],
                  component: {
                    name: pkg.name,
                    version: pkg.version,
                    type: 'application',
                    description: pkg.description
                  }
                },
                components: Object.keys(pkg.dependencies || {}).map(name => ({
                  type: 'library',
                  name: name,
                  version: pkg.dependencies[name],
                  scope: 'required'
                }))
              };
              
              fs.writeFileSync('reports/sbom-basic.json', JSON.stringify(sbom, null, 2));
              console.log('📦 Basic SBOM generated successfully');
            "
          fi

      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: reports/sbom-*.json
          retention-days: 90
        continue-on-error: true

      - name: Upload SBOM to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: reports/sbom-*.json
          asset_name: sbom-${{ github.event.release.tag_name }}.json
          asset_content_type: application/json

      - name: Comment SBOM Summary on PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find the SBOM file
            const reportsDir = './reports';
            const sbomFiles = fs.readdirSync(reportsDir).filter(f => f.startsWith('sbom-'));

            if (sbomFiles.length === 0) {
              console.log('No SBOM files found');
              return;
            }

            const sbomPath = path.join(reportsDir, sbomFiles[0]);
            const sbom = JSON.parse(fs.readFileSync(sbomPath, 'utf8'));

            const summary = `## 📦 Software Bill of Materials (SBOM)

            **Generated:** ${new Date(sbom.metadata.generatedAt).toLocaleString()}
            **Commit:** ${sbom.metadata.commit.substring(0, 8)}
            **Compiler:** Solidity ${sbom.compiler.solcVersion}
            **Optimizer:** ${sbom.compiler.optimizerEnabled ? 'Enabled' : 'Disabled'} (${sbom.compiler.optimizerRuns} runs)

            ### 📊 Contract Summary
            - **Total Contracts:** ${sbom.contracts.length}
            - **Libraries:** ${sbom.contracts.filter(c => c.type === 'library').length}
            - **Interfaces:** ${sbom.contracts.filter(c => c.type === 'interface').length}
            - **Core Contracts:** ${sbom.contracts.filter(c => c.type === 'contract').length}

            ### 🔒 Security Status
            - **Audit Status:** ${sbom.security.auditStatus}
            - **Security Checks:** ${sbom.security.securityChecks.length} implemented
            - **Known Vulnerabilities:** ${sbom.security.knownVulnerabilities.length}

            <details>
            <summary>📋 Contract Details</summary>

            | Contract | Type | Source Hash | Bytecode Hash |
            |----------|------|-------------|---------------|
            ${sbom.contracts.map(c =>
              `| ${c.name} | ${c.type} | \`${c.sourceHash.substring(0, 8)}...\` | \`${c.bytecodeHash.substring(0, 8)}...\` |`
            ).join('\n')}

            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Security Scan
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
        run: |
          echo "🔍 Running security analysis on SBOM..."

          # Check for known vulnerable dependency versions
          if command -v npm audit &> /dev/null; then
            npm audit --audit-level moderate || echo "⚠️  NPM audit found issues"
          fi

          # Analyze contract bytecode for potential issues
          echo "📊 SBOM security analysis complete"
