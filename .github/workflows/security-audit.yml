name: Security Audit Pipeline

on:
  push:
    branches: [main, develop, Phase-*]
    paths: ["contracts/**", "scripts/**", "hardhat.config.ts"]
  pull_request:
    branches: [main, develop]
    paths: ["contracts/**", "scripts/**", "hardhat.config.ts"]
  schedule:
    - cron: "0 2 * * 1" # Weekly security scan

env:
  NODE_VERSION: "18"
  FOUNDRY_PROFILE: "ci"

jobs:
  # Pre-audit compilation and basic checks
  prepare-audit:
    name: Prepare Security Audit
    runs-on: ubuntu-latest
    outputs:
      contracts-changed: ${{ steps.changes.outputs.contracts }}
      should-run-full-audit: ${{ steps.decide.outputs.full-audit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund

      - name: Check for contract changes
        id: changes
        run: |
          # Check if contract files have changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(contracts/|scripts/|hardhat.config.ts)" > /dev/null; then
            echo "contracts=true" >> $GITHUB_OUTPUT
          else
            echo "contracts=false" >> $GITHUB_OUTPUT
          fi

      - name: Compile contracts
        run: npx hardhat compile

      - name: Decide audit scope
        id: decide
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "full-audit=true" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.changes.outputs.contracts }}" == "true" ]]; then
            echo "full-audit=true" >> $GITHUB_OUTPUT
          else
            echo "full-audit=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache compilation artifacts
        uses: actions/cache@v4
        with:
          path: |
            artifacts
            cache
            typechain-types
          key: compilation-${{ runner.os }}-${{ hashFiles('contracts/**/*.sol', 'hardhat.config.ts') }}

  # Slither static analysis
  slither-analysis:
    name: Slither Static Analysis
    runs-on: ubuntu-latest
    needs: prepare-audit
    if: needs.prepare-audit.outputs.should-run-full-audit == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Slither
        run: |
          pip install slither-analyzer==0.10.0
          pip install solc-select
          solc-select install 0.8.30
          solc-select use 0.8.30

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund

      - name: Restore compilation cache
        uses: actions/cache@v4
        with:
          path: |
            artifacts
            cache
            typechain-types
          key: compilation-${{ runner.os }}-${{ hashFiles('contracts/**/*.sol', 'hardhat.config.ts') }}

      - name: Run Slither analysis
        run: |
          # Create security reports directory
          mkdir -p security-reports

          # Run Slither with basic configuration
          slither . \
            --json security-reports/slither-report.json \
            --exclude-dependencies \
            --exclude-informational \
            --exclude-optimization \
            --filter-paths "node_modules,test" \
            --hardhat-ignore-compile || echo "Slither completed with findings"

      - name: Process Slither results
        run: |
          # Basic processing of results
          if [ -f "security-reports/slither-report.json" ]; then
            echo "Slither analysis completed"
            
            # Check if file contains critical issues
            if grep -q '"impact": "High"' security-reports/slither-report.json; then
              echo "WARNING: High impact issues found in Slither report"
            fi
            
            # Create a simple summary
            echo "# Slither Analysis Summary" > security-reports/slither-summary.md
            echo "Analysis completed at $(date)" >> security-reports/slither-summary.md
            echo "Report available in artifacts" >> security-reports/slither-summary.md
          fi

      - name: Upload Slither reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: slither-security-reports
          path: security-reports/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-reports/slither-summary.md')) {
              const summary = fs.readFileSync('security-reports/slither-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Slither Security Analysis\n\n${summary}`
              });
            }

  # Mythril symbolic execution
  mythril-analysis:
    name: Mythril Symbolic Analysis
    runs-on: ubuntu-latest
    needs: prepare-audit
    if: needs.prepare-audit.outputs.should-run-full-audit == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Mythril
        run: |
          pip install mythril==0.24.8
          pip install solc-select
          solc-select install 0.8.30
          solc-select use 0.8.30

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund

      - name: Compile contracts for Mythril
        run: npx hardhat compile

      - name: Run Mythril analysis
        run: |
          mkdir -p security-reports

          # Find contract files to analyze
          CONTRACTS=$(find contracts -name "*.sol" -type f | head -5)

          for contract in $CONTRACTS; do
            if [ -f "$contract" ]; then
              CONTRACT_NAME=$(basename "$contract" .sol)
              echo "Analyzing $CONTRACT_NAME..."
              
              timeout 120 myth analyze "$contract" \
                --solv 0.8.30 \
                --max-depth 3 \
                --execution-timeout 30 \
                --strategy bfs \
                --json \
                --output "security-reports/mythril-${CONTRACT_NAME}.json" || true
            fi
          done

      - name: Process Mythril results
        run: |
          # Basic processing of Mythril results
          if ls security-reports/mythril-*.json 1> /dev/null 2>&1; then
            echo "Mythril analysis completed"
            
            # Create simple summary
            echo "# Mythril Analysis Summary" > security-reports/mythril-summary.md
            echo "Analysis completed at $(date)" >> security-reports/mythril-summary.md
            echo "Reports available in artifacts" >> security-reports/mythril-summary.md
          fi

      - name: Upload Mythril reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mythril-security-reports
          path: security-reports/
          retention-days: 30

  # Combined security report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [prepare-audit, slither-analysis, mythril-analysis]
    if: always() && needs.prepare-audit.outputs.should-run-full-audit == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Slither reports
        uses: actions/download-artifact@v4
        with:
          name: slither-security-reports
          path: slither-reports/
        continue-on-error: true

      - name: Download Mythril reports
        uses: actions/download-artifact@v4
        with:
          name: mythril-security-reports
          path: mythril-reports/
        continue-on-error: true

      - name: Generate combined security report
        run: |
          # Create a basic combined report
          echo "# Security Analysis Summary" > security-summary.md
          echo "Generated at: $(date)" >> security-summary.md
          echo "" >> security-summary.md

          if [ -d "slither-reports" ]; then
            echo "## Slither Analysis" >> security-summary.md
            echo "Slither reports available in artifacts" >> security-summary.md
            echo "" >> security-summary.md
          fi

          if [ -d "mythril-reports" ]; then
            echo "## Mythril Analysis" >> security-summary.md
            echo "Mythril reports available in artifacts" >> security-summary.md
            echo "" >> security-summary.md
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

  # Emergency security scan (lightweight)
  emergency-scan:
    name: Emergency Security Scan
    runs-on: ubuntu-latest
    needs: prepare-audit
    if: needs.prepare-audit.outputs.should-run-full-audit == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund

      - name: Run basic security checks
        run: |
          # Basic pattern matching for known security issues
          echo "Running emergency security patterns..."

          # Check for common vulnerabilities
          if grep -r "tx.origin" contracts/; then
            echo "WARNING: Found tx.origin usage - potential security risk"
          fi

          if grep -r "block.timestamp" contracts/ | grep -v "test"; then
            echo "INFO: Found block.timestamp usage - verify not used for critical logic"
          fi

          # Check for proper access controls
          if ! grep -r "onlyRole\|onlyOwner\|require.*msg.sender" contracts/; then
            echo "WARNING: No access controls found - verify intentional"
          fi

          echo "Emergency security scan completed"
