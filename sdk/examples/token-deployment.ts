/**
 * PayRox SDK Token Deployment Example
 * 
 * This example shows how to deploy an ERC20 token using PayRox
 */

import { PayRoxClient } from '../src/client';
import { ethers } from 'ethers';

async function tokenExample() {
  console.log('ü™ô PayRox SDK Token Deployment Example');
  console.log('======================================\n');

  // Connect to PayRox
  const client = PayRoxClient.fromRpc(
    'http://localhost:8545',
    'ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',
    'localhost'
  );

  // ERC20 token parameters
  const tokenName = 'PayRox Token';
  const tokenSymbol = 'PAYRX';
  const tokenDecimals = 18;
  const totalSupply = ethers.parseEther('1000000'); // 1M tokens

  // Simplified ERC20 bytecode (you would compile this from Solidity)
  // Breaking into smaller chunks to avoid spell checker performance issues
  const tokenBytecode = 
    '0x608060405234801561001057600080fd5b506040516108fe3803806108fe833981' +
    '8101604052810190610032919061028c565b83600390805190602001906100489291906100fd' +
    '565b50826004908051906020019061005f9291906100fd565b508160058190555080600660003373' +
    'ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffff' +
    'ffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffff' +
    'ffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad' +
    'be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161010991906102fb' +
    '565b60405180910390a35050505061041e565b82805461012590610345565b90600052602060' +
    '002090601f016020900481019282610147576000855561018e565b82601f1061016057805160ff19' +
    '1683800117855561018e565b8280016001018555821561018e579182015b8281111561018d57825182' +
    '55916020019190600101906101725b50905061019b919061019f565b5090565b5b808211156101b857' +
    '60008160009055506001016101a0565b5090565b60006101cf6101ca846103bb565b610396565b9050' +
    '828152602081018484840111156101eb576101ea61048a565b5b6101f6848285610403565b509392' +
    '505050565b600082601f83011261021357610212610485565b5b81516102238482602086016101bc' +
    '565b91505092915050565b60008151905061023b816104b4565b92915050565b600081519050610250' +
    '816104cb565b92915050565b60006020828403121561026c5761026b610494565b5b600082015167' +
    'ffffffffffffffff81111561028a57610289610490565b5b610296848285016101fe565b91505092' +
    '915050565b600080600080608085870312156102b9576102b8610494565b5b600085015167ffffff' +
    'ffffffff8111156102d7576102d6610490565b5b6102e3878288016101fe565b945050602085015167' +
    'ffffffffffffffff81111561030457610303610490565b5b610310878288016101fe565b935050604061' +
    '03218782880161022c565b925050606061033287828801610241565b91505092959194509250565b60' +
    '00600282049050600182168061035d57607f821691505b6020821081141561037157610370610456565b' +
    '50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052' +
    '602260045260246000fd5b60006103b1610396565b90506103bd8282610412565b919050565b600060' +
    '4051905090565b600067ffffffffffffffff8211156103e7576103e6610443565b5b6103f082610472' +
    '565b9050602081019050919050565b82818337600083830152505050565b61041582610472565b8101' +
    '81811067ffffffffffffffff8211171561043457610433610443565b5b80604052505050565b7f4e48' +
    '7b7100000000000000000000000000000000000000000000000000000000600052604160045260246000' +
    'fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260' +
    '246000fd5b6000601f19601f8301169050919050565b600080fd5b600080fd5b600080fd5b600080fd5b60' +
    '00819050919050565b6104bd81610499565b81146104c857600080fd5b50565b6000819050919050565b61' +
    '04de816104cb565b81146104e957600080fd5b50565b6104d1806104fc6000396000f3fe608060405234801561' +
    '001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857' +
    '806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063' +
    'dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc' +
    '57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c391906103e4' +
    '565b60405180910390f35b6100e660048036038101906100e191906103a0565b610308565b6040516100f391906103c9' +
    '565b60405180910390f35b610104610326565b6040516101119190610406565b60405180910390f35b61013460048036' +
    '038101906101f919061034d565b610330565b60405161014191906103c9565b60405180910390f35b610152610431565b60' +
    '40516101f9190610421565b60405180910390f35b610182600480360381019061017d91906103a0565b61043a565b60405161' +
    '018f91906103c9565b60405180910390f35b6101b260048036038101906101ad91906102e0565b6104e5565b6040516101bf' +
    '9190610406565b60405180910390f35b6101d061052e565b6040516101dd91906103e4565b60405180910390f35b610200' +
    '600480360381019061fb91906103a0565b6105c0565b60405161020d91906103c9565b60405180910390f35b61023060048036' +
    '0381019061022b91906103a0565b6106b4565b60405161023d91906103c9565b60405180910390f35b61026060048036038101' +
    '9061025b919061030d565b6106d2565b60405161026d9190610406565b60405180910390f35b60606003905490610100' +
    '0a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce567' +
    '6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102df57600080fd5b505afa158015610' +
    '2f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103179190610759565b60' +
    'ff16905090565b600061031c610314610712565b848461071a565b6001905092915050565b6000600554905090565b600061' +
    '033d8484846108e5565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffff' +
    'ffffffffffffffff16815260200190815260200160002060006103886107f2565b73ffffffffffffffffffffffffffffffff' +
    'ff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156103d7576040' +
    '517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce90610bb0565b60405180' +
    '910390fd5b6103eb856103e36107f2565b85840361071a565b60019150509392505050565b60006103ff6107f2565b905090' +
    '565b600061043561043061042b84610c10565b610beb565b610c10565b9050919050565b60006104426104378461043f84610c6c' +
    '565b919050565b600080600160008461044f6107f2565b73ffffffffffffffffffffffffffffffffffffffff1673fffffffffffff' +
    'fffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ff' +
    'ffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104d0576040517f08c379a0' +
    '00000000000000000000000000000000000000000000000000000000081526004016104c790610b90565b60405180910390fd5b6104dd' +
    '8484848461071a565b600191505092915050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffff' +
    'ffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461053d90610d91' +
    '565b80601f016020809104026020016040519081016040528092919081815260200182805461056990610d91565b80156105b6' +
    '5780601f1061058b576101008083540402835291602001916105b6565b820191906000526020600020905b81548152906001' +
    '019060200180831161059957829003601f168201915b5050505050905090565b600080600160006105cf6107f2565b73ffffffffff' +
    'ffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020' +
    '60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001' +
    '908152602001600020549050828110156106515760405162461bcd60e51b815260040161064890610b70565b60405180910390fd5b6106' +
    '656106566107f2565b8585840361071a565b600191505092915050565b60006106c86106776107f2565b84846108e5565b60019050' +
    '92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffff' +
    'ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673fffffffffffffffffffff' +
    'fffffffffffff168152602001908152602001600020549050929150505600a264697066735822122041f7c77c4b67ab4a4e6b8a5a3c0' +
    'f3e8e5d5c1b2a9a8a7a6a5a4a3a2a1a0a9a864736f6c63430008110033';

  console.log('1. Preparing token deployment...');
  console.log(`   Name: ${tokenName}`);
  console.log(`   Symbol: ${tokenSymbol}`);
  console.log(`   Decimals: ${tokenDecimals}`);
  console.log(`   Total Supply: ${ethers.formatEther(totalSupply)} tokens`);

  const constructorArgs = [tokenName, tokenSymbol, tokenDecimals, totalSupply];

  // Calculate address
  const tokenAddress = await client.calculateAddress(tokenBytecode, constructorArgs);
  console.log(`\nüìç Token will deploy to: ${tokenAddress}`);

  // Check if already deployed
  const alreadyDeployed = await client.isDeployed(tokenBytecode, constructorArgs);
  if (alreadyDeployed) {
    console.log('‚úÖ Token already deployed!');
    return tokenAddress;
  }

  // Deploy token
  console.log('\n2. Deploying token...');
  const result = await client.deployContract(
    tokenBytecode,
    constructorArgs,
    'token'
  );

  console.log(`‚úÖ Token deployed successfully!`);
  console.log(`üìç Address: ${result.address}`);
  console.log(`üîó Transaction: ${result.transactionHash}`);

  // Verify deployment
  const verified = await client.verifyDeployment(result.address, tokenBytecode);
  console.log(`üîç Verification: ${verified ? 'PASSED' : 'FAILED'}`);

  console.log('\nüéâ Token deployment completed!');
  return result.address;
}

// Run the example
if (require.main === module) {
  tokenExample()
    .then((address) => {
      console.log(`\n‚úÖ Token available at: ${address}`);
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Token deployment failed:', error.message);
      process.exit(1);
    });
}

export { tokenExample };
