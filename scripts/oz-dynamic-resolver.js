/**
 * OpenZeppelin Dynamic Import Resolver
 * Auto-generated by OpenZeppelinDynamicManager
 */

const ozVersion = 5;

/**
 * Get the correct OpenZeppelin import path
 */
function getOZImport(contractName, category = 'access') {
    const basePath = '@openzeppelin/contracts';
    const categories = {
        access: 'access',
        security: 'security', 
        token: 'token',
        utils: 'utils',
        proxy: 'proxy',
        governance: 'governance'
    };
    
    const categoryPath = categories[category] || category;
    
    // Version-specific paths
    if (ozVersion >= 5) {
        const v5Mappings = {
            'AccessControl': 'access/AccessControl.sol',
            'Ownable': 'access/Ownable.sol',
            'Pausable': 'utils/Pausable.sol',
            'ReentrancyGuard': 'utils/ReentrancyGuard.sol',
            'IERC20': 'token/ERC20/IERC20.sol',
            'SafeERC20': 'token/ERC20/utils/SafeERC20.sol',
            'ECDSA': 'utils/cryptography/ECDSA.sol',
            'ERC165': 'utils/introspection/ERC165.sol'
        };
        
        return `${basePath}/${v5Mappings[contractName] || `${categoryPath}/${contractName}.sol`}`;
    } else {
        // v4.x fallback
        const v4Mappings = {
            'AccessControl': 'access/AccessControl.sol',
            'Ownable': 'access/Ownable.sol', 
            'Pausable': 'security/Pausable.sol',
            'ReentrancyGuard': 'security/ReentrancyGuard.sol',
            'IERC20': 'token/ERC20/IERC20.sol',
            'SafeERC20': 'token/ERC20/utils/SafeERC20.sol',
            'ECDSA': 'utils/cryptography/ECDSA.sol',
            'ERC165': 'utils/introspection/ERC165.sol'
        };
        
        return `${basePath}/${v4Mappings[contractName] || `${categoryPath}/${contractName}.sol`}`;
    }
}

/**
 * Get all OZ imports for a contract type
 */
function getOZBundle(bundleType) {
    const bundles = {
        'access-control': ['AccessControl', 'Ownable'],
        'security': ['Pausable', 'ReentrancyGuard'],
        'token': ['IERC20', 'SafeERC20'],
        'crypto': ['ECDSA'],
        'full': ['AccessControl', 'Ownable', 'Pausable', 'ReentrancyGuard', 'IERC20', 'SafeERC20', 'ECDSA']
    };
    
    const contracts = bundles[bundleType] || [];
    return contracts.map(contract => ({
        contract,
        import: getOZImport(contract)
    }));
}

/**
 * Check OZ compatibility
 */
function checkCompatibility(requiredContracts = []) {
    const issues = [];
    
    requiredContracts.forEach(contract => {
        try {
            const importPath = getOZImport(contract);
            // Could add actual file existence check here
        } catch (error) {
            issues.push(`${contract}: ${error.message}`);
        }
    });
    
    return {
        compatible: issues.length === 0,
        issues,
        version: ozVersion
    };
}

module.exports = {
    ozVersion,
    getOZImport,
    getOZBundle,
    checkCompatibility
};
